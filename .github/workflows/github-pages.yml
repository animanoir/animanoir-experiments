# This is a basic workflow to help you get started with Actions

name: Deploy to GitHub Pages

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# YAML Explained:
# =================
# YAML (YAML Ain't Markup Language) is a human-readable data serialization format.
# It's commonly used for configuration files and in applications where data is stored
# or transmitted, particularly in DevOps tools like GitHub Actions, Kubernetes, Docker, etc.
#
# Key YAML Syntax:
# ----------------
# 1. Structure: YAML uses indentation (spaces, not tabs) to indicate nesting
#    parent:
#      child: value
#      another_child: value
#
# 2. Comments start with '#'
#
# 3. Key-value pairs are separated by colons:
#    key: value
#
# 4. Lists are denoted by hyphens:
#    - item1
#    - item2
#
# 5. Multi-line strings:
#    text: |
#      This is a multi-line
#      string that preserves
#      line breaks.
#
# 6. References and anchors:
#    base: &base_anchor
#      key: value
#    derived:
#      <<: *base_anchor  # Imports the base_anchor
#      extra: additional_value
#
# Common YAML Gotchas:
# -------------------
# - Indentation matters! Always use spaces (typically 2) consistently
# - Be careful with special characters in unquoted strings
# - Boolean values: true, false, yes, no, on, off
# - YAML is more lenient than JSON but can be more error-prone